name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Create application.yml
        run: |
          mkdir -p ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./src/main/resources/application.yml

      - name: Build JAR
        run: |
          if [ "${{ github.ref }}" == "refs/heads/main" ]; then
            ./gradlew clean build -x test -Dspring.profiles.active=production
          else
            ./gradlew clean build -x test -Dspring.profiles.active=dev
          fi

      - name: Debug build/libs
        run: ls -al ./build/libs

      - name: Copy JAR to Docker context
        run: cp ./build/libs/Kindergarten-0.0.1-SNAPSHOT.jar ./docker/app/app.jar

      - name: Debug docker/app
        run: ls -al ./docker/app

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./docker/app
          file: ./docker/app/Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_HUB }}/kindergarten:${{ github.ref == 'refs/heads/main' && 'latest' || 'dev' }}

      # ---------- 프로덕션 배포 ----------
      - name: Upload stack files (prod)
        if: github.ref == 'refs/heads/main'
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.PRODUCTION_SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.PRODUCTION_SERVER_SSH_KEY }}
          # 레포의 실제 경로에 맞춰 업로드
          source: "./docker/app/docker-compose.yml,./docker/loki/config/config.yml,./docker/promtail/config/config.yml"

          target: /home/ubuntu/stack

      - name: Deploy to Server (prod)
        if: github.ref == 'refs/heads/main'
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.PRODUCTION_SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.PRODUCTION_SERVER_SSH_KEY }}
          script: |
            set -e
            cd /home/ubuntu/stack/docker/app

            sudo docker compose down || true

            # 기존 kindergarten 이미지 전부 삭제
            sudo docker images "juhoonlee/kindergarten" -q | xargs -r sudo docker rmi -f

            # .env 주입 (compose에서 사용)
            cat > .env << 'EOF'
            REGISTRY=${{ secrets.DOCKER_HUB }}
            APP_TAG=latest
            SPRING_PROFILE=production
            EOF

            # 최신 이미지 풀 & 재기동
            sudo docker compose pull
            sudo docker compose up -d --remove-orphans

      - name: Debug upload paths
        run: |
          set -e
          ls -al docker/app/docker-compose.yml
          ls -al docker/loki/config/config.yml
          ls -al docker/promtail/config/config.yml      

      - name: Upload stack files (dev)
        if: github.ref == 'refs/heads/develop'
        uses: appleboy/scp-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "./docker/app/docker-compose.yml,./docker/loki/config/config.yml,./docker/promtail/config/config.yml"
          target: /home/ubuntu/stack

      - name: Deploy to Dev Server
        if: github.ref == 'refs/heads/develop'
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
            set -e
            cd /home/ubuntu/stack/docker/app

            sudo docker compose down || true

            # 기존 kindergarten 이미지 전부 삭제
            sudo docker images "juhoonlee/kindergarten" -q | xargs -r sudo docker rmi -f

            cat > .env << 'EOF'
            REGISTRY=${{ secrets.DOCKER_HUB }}
            APP_TAG=dev
            SPRING_PROFILE=dev
            EOF

            sudo docker compose pull
            sudo docker compose up -d --remove-orphans
